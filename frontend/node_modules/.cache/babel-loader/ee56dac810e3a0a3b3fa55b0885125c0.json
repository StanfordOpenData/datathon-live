{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Daniel\\\\Documents\\\\datathon-live\\\\frontend\\\\src\\\\components\\\\datathon-events.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport { Container, Row, Col, Modal } from \"react-bootstrap\";\nimport styled from \"styled-components\";\nimport dayjs from \"dayjs\";\nimport { dates as OfficialDates, events as OfficialEvents } from \"./content.json\";\nimport api from \"../global/api.js\";\n\nfunction Zoom(selectedDialog) {\n  if (selectedDialog.zoom) {\n    console.log(selectedDialog);\n    return /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: selectedDialog.zoom,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }\n    }, \"Zoom Link\"));\n  }\n\n  return null;\n}\n\nfunction Links() {\n  const [slackNotifs, setSlackNotifs] = useState([]);\n  const [selectedDialog, setSelectedDialog] = useState({\n    eventId: null\n  });\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = () => setShow(true);\n\n  const [dates, setDates] = useState(OfficialDates);\n  const [events, setEvents] = useState(OfficialEvents);\n\n  const retrieveSlackAnnouncements = () => {\n    api.get(\"/slackAnnouncements\").then(res => {\n      setSlackNotifs(res.data.filter(item => item.type !== \"system\"));\n    }).catch(err => console.log(\"DILAN THERE IS ERROR\"));\n  };\n\n  const toggleDateSelect = (date, id) => {\n    var newDates = JSON.parse(JSON.stringify(dates));\n    var newEvents = JSON.parse(JSON.stringify(OfficialEvents));\n    newDates.forEach(date => {\n      if (date.id === id) {\n        date.selected = true;\n      } else {\n        date.selected = false;\n      }\n    });\n    var updatedEvents = [];\n    newEvents.forEach(event => {\n      if (event.dateId === id) {\n        updatedEvents.push(event);\n      }\n    });\n    setEvents(updatedEvents);\n    setDates(newDates);\n  };\n\n  const renderDialogBox = event => {\n    setSelectedDialog({\n      title: event.title,\n      description: event.description,\n      zoom: event.zoom\n    });\n    setShow(true);\n    return /*#__PURE__*/React.createElement(React.Fragment, null);\n  };\n\n  useEffect(() => {\n    retrieveSlackAnnouncements();\n    setEvents(OfficialEvents);\n  }, [OfficialEvents]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"link-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    class: \"section-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, \"Datathon Events\"), /*#__PURE__*/React.createElement(Container, {\n    style: {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    xs: 12,\n    md: 6,\n    style: {\n      paddingTop: 30\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(MainTitles, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, \"Announcements\"), /*#__PURE__*/React.createElement(AnnouncementContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, slackNotifs.map(notif => {\n    return /*#__PURE__*/React.createElement(SlackNotif, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(AnnouncementTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }\n    }, \"Announcement\"), /*#__PURE__*/React.createElement(SlackDateDisplay, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }\n    }, dayjs(notif.timestamp * 1000).format(\"MM/DD/YYYY\")), /*#__PURE__*/React.createElement(SlackNotifDescription, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }\n    }, notif.text));\n  }))), /*#__PURE__*/React.createElement(Col, {\n    xs: 12,\n    md: 6,\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      overflow: \"hidden\",\n      paddingTop: 30\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(MainTitles, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, \"Upcoming Events\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      overflow: \"scroll\",\n      flex: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    style: {\n      display: \"flex\",\n      justifyContent: \"flex-start\",\n      padding: \"0px 20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 15\n    }\n  }, dates.map(date => {\n    return /*#__PURE__*/React.createElement(DateCard, {\n      style: date.selected ? styles.filled : styles.notFilled,\n      key: date.id,\n      onClick: () => toggleDateSelect(date.date, date.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 21\n      }\n    }, date.date);\n  })), /*#__PURE__*/React.createElement(EventCardContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 15\n    }\n  }, events.map(event => {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(EventCard, {\n      key: event.id,\n      onClick: () => {\n        console.log(\"render dialog here\");\n        renderDialogBox(event);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 25\n      }\n    }, event.title), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 25\n      }\n    }, event.date), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 25\n      }\n    }, event.time)));\n  })))))), /*#__PURE__*/React.createElement(Modal, {\n    style: {\n      marginTop: 300\n    },\n    show: show,\n    onHide: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 11\n    }\n  }, selectedDialog.title)), /*#__PURE__*/React.createElement(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  }, \"People of Interest: \", selectedDialog.description), /*#__PURE__*/React.createElement(Zoom, Object.assign({}, selectedDialog, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Modal.Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"secondary\",\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 11\n    }\n  }, \"Close\"))));\n}\n\nexport default Links;\nconst styles = {\n  filled: {\n    backgroundColor: \"red\"\n  },\n  notFilled: {\n    backgroundColor: \"purple\"\n  }\n};\nconst MainTitles = styled.div`\n  color: rgba(102, 198, 177, 1);\n  line-height: 100%;\n  font-size: 30px;\n  font-weight: bold;\n  font-style: normal;\n  font-family: Sora;\n  padding-bottom: 30px;\n`;\nconst AnnouncementContainer = styled.div`\n  flex: 1;\n  min-height: 92%;\n  background-color: #e1f4fd;\n  border-radius: 20px;\n  padding-bottom: 20px;\n  margin-bottom: 20px;\n`;\nconst AnnouncementTitle = styled.h1`\n  font-size: 20px;\n  line-height: 25px;\n  font-weight: bold;\n  font-style: normal;\n  font-family: Sora;\n  color: rgba(0, 43, 82, 1);\n  margin-bottom: 3px;\n`;\nconst SlackNotif = styled.div`\n  padding-left: 30px;\n  padding-bottom: 15px;\n  padding-top: 15px;\n`;\nconst SlackDateDisplay = styled.div`\n  color: rgba(28, 117, 188, 1);\n  line-height: 25px;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  padding: 0px;\n  margin: 5px 0px;\n`;\nconst SlackNotifDescription = styled.div`\n  font-size: 16px;\n  color: rgba(0, 0, 0, 1);\n`;\nconst DateCard = styled.div`\n  padding: 10px 20px;\n  border: 1px solid #e1f4fd;\n  color: #e1f4fd;\n  margin-right: 10px;\n  border-radius: 3px;\n  margin-bottom: 10px;\n`;\nconst EventCard = styled.div`\n  background-color: #f4f4f4;\n  padding: 10px 15px;\n  margin: 0px;\n  border-radius: 10px;\n  margin-bottom: 10px;\n`;\nconst EventCardContainer = styled.div`\n  padding: 10px 5px;\n  border-radius: 10px;\n`;","map":{"version":3,"sources":["C:/Users/Daniel/Documents/datathon-live/frontend/src/components/datathon-events.jsx"],"names":["React","useEffect","useState","Button","Container","Row","Col","Modal","styled","dayjs","dates","OfficialDates","events","OfficialEvents","api","Zoom","selectedDialog","zoom","console","log","Links","slackNotifs","setSlackNotifs","setSelectedDialog","eventId","show","setShow","handleClose","handleShow","setDates","setEvents","retrieveSlackAnnouncements","get","then","res","data","filter","item","type","catch","err","toggleDateSelect","date","id","newDates","JSON","parse","stringify","newEvents","forEach","selected","updatedEvents","event","dateId","push","renderDialogBox","title","description","display","justifyContent","paddingTop","map","notif","timestamp","format","text","flexDirection","overflow","flex","padding","styles","filled","notFilled","time","marginTop","backgroundColor","MainTitles","div","AnnouncementContainer","AnnouncementTitle","h1","SlackNotif","SlackDateDisplay","SlackNotifDescription","DateCard","EventCard","EventCardContainer"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { Container, Row, Col, Modal } from \"react-bootstrap\";\r\nimport styled from \"styled-components\";\r\nimport dayjs from \"dayjs\";\r\nimport {\r\n  dates as OfficialDates,\r\n  events as OfficialEvents,\r\n} from \"./content.json\";\r\n\r\nimport api from \"../global/api.js\";\r\n\r\nfunction Zoom(selectedDialog) {\r\n  if (selectedDialog.zoom) {\r\n    console.log(selectedDialog);\r\n    return (\r\n      <Modal.Body>\r\n        <a href={selectedDialog.zoom}>Zoom Link</a>\r\n      </Modal.Body>\r\n    );\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction Links() {\r\n  const [slackNotifs, setSlackNotifs] = useState([]);\r\n  const [selectedDialog, setSelectedDialog] = useState({\r\n    eventId: null,\r\n  });\r\n\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n  const [dates, setDates] = useState(OfficialDates);\r\n  const [events, setEvents] = useState(OfficialEvents);\r\n\r\n  const retrieveSlackAnnouncements = () => {\r\n    api\r\n      .get(\"/slackAnnouncements\")\r\n      .then((res) => {\r\n        setSlackNotifs(res.data.filter((item) => item.type !== \"system\"));\r\n      })\r\n      .catch((err) => console.log(\"DILAN THERE IS ERROR\"));\r\n  };\r\n\r\n  const toggleDateSelect = (date, id) => {\r\n    var newDates = JSON.parse(JSON.stringify(dates));\r\n    var newEvents = JSON.parse(JSON.stringify(OfficialEvents));\r\n    newDates.forEach((date) => {\r\n      if (date.id === id) {\r\n        date.selected = true;\r\n      } else {\r\n        date.selected = false;\r\n      }\r\n    });\r\n    var updatedEvents = [];\r\n    newEvents.forEach((event) => {\r\n      if (event.dateId === id) {\r\n        updatedEvents.push(event);\r\n      }\r\n    });\r\n    setEvents(updatedEvents);\r\n    setDates(newDates);\r\n  };\r\n\r\n  const renderDialogBox = (event) => {\r\n    setSelectedDialog({\r\n      title: event.title,\r\n      description: event.description,\r\n      zoom: event.zoom,\r\n    });\r\n    setShow(true);\r\n    return <></>;\r\n  };\r\n\r\n  useEffect(() => {\r\n    retrieveSlackAnnouncements();\r\n    setEvents(OfficialEvents);\r\n  }, [OfficialEvents]);\r\n\r\n  return (\r\n    <div id=\"link-section\">\r\n      <h2 class=\"section-heading\">Datathon Events</h2>\r\n      <Container style={{}}>\r\n        <Row style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n          <Col xs={12} md={6} style={{ paddingTop: 30 }}>\r\n            <MainTitles>Announcements</MainTitles>\r\n            <AnnouncementContainer>\r\n              {slackNotifs.map((notif) => {\r\n                return (\r\n                  <SlackNotif>\r\n                    <AnnouncementTitle>Announcement</AnnouncementTitle>\r\n                    <SlackDateDisplay>\r\n                      {dayjs(notif.timestamp * 1000).format(\"MM/DD/YYYY\")}\r\n                    </SlackDateDisplay>\r\n                    <SlackNotifDescription>{notif.text}</SlackNotifDescription>\r\n                  </SlackNotif>\r\n                );\r\n              })}\r\n            </AnnouncementContainer>\r\n          </Col>\r\n          <Col\r\n            xs={12}\r\n            md={6}\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              overflow: \"hidden\",\r\n              paddingTop: 30,\r\n            }}\r\n          >\r\n            <MainTitles>Upcoming Events</MainTitles>\r\n\r\n            <div style={{ overflow: \"scroll\", flex: 1 }}>\r\n              <Row\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"flex-start\",\r\n                  padding: \"0px 20px\",\r\n                }}\r\n              >\r\n                {dates.map((date) => {\r\n                  return (\r\n                    <DateCard\r\n                      style={date.selected ? styles.filled : styles.notFilled}\r\n                      key={date.id}\r\n                      onClick={() => toggleDateSelect(date.date, date.id)}\r\n                    >\r\n                      {date.date}\r\n                    </DateCard>\r\n                  );\r\n                })}\r\n              </Row>\r\n              <EventCardContainer>\r\n                {events.map((event) => {\r\n                  return (\r\n                    <>\r\n                      <EventCard\r\n                        key={event.id}\r\n                        onClick={() => {\r\n                          console.log(\"render dialog here\");\r\n                          renderDialogBox(event);\r\n                        }}\r\n                      >\r\n                        <div>{event.title}</div>\r\n                        <div>{event.date}</div>\r\n                        <div>{event.time}</div>\r\n                      </EventCard>\r\n                    </>\r\n                  );\r\n                })}\r\n              </EventCardContainer>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n      <Modal style={{ marginTop: 300 }} show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>{selectedDialog.title}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          People of Interest: {selectedDialog.description}\r\n        </Modal.Body>\r\n        <Zoom {...selectedDialog}></Zoom>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Links;\r\n\r\nconst styles = {\r\n  filled: {\r\n    backgroundColor: \"red\",\r\n  },\r\n  notFilled: {\r\n    backgroundColor: \"purple\",\r\n  },\r\n};\r\n\r\nconst MainTitles = styled.div`\r\n  color: rgba(102, 198, 177, 1);\r\n  line-height: 100%;\r\n  font-size: 30px;\r\n  font-weight: bold;\r\n  font-style: normal;\r\n  font-family: Sora;\r\n  padding-bottom: 30px;\r\n`;\r\n\r\nconst AnnouncementContainer = styled.div`\r\n  flex: 1;\r\n  min-height: 92%;\r\n  background-color: #e1f4fd;\r\n  border-radius: 20px;\r\n  padding-bottom: 20px;\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst AnnouncementTitle = styled.h1`\r\n  font-size: 20px;\r\n  line-height: 25px;\r\n  font-weight: bold;\r\n  font-style: normal;\r\n  font-family: Sora;\r\n  color: rgba(0, 43, 82, 1);\r\n  margin-bottom: 3px;\r\n`;\r\n\r\nconst SlackNotif = styled.div`\r\n  padding-left: 30px;\r\n  padding-bottom: 15px;\r\n  padding-top: 15px;\r\n`;\r\n\r\nconst SlackDateDisplay = styled.div`\r\n  color: rgba(28, 117, 188, 1);\r\n  line-height: 25px;\r\n  font-size: 16px;\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  padding: 0px;\r\n  margin: 5px 0px;\r\n`;\r\n\r\nconst SlackNotifDescription = styled.div`\r\n  font-size: 16px;\r\n  color: rgba(0, 0, 0, 1);\r\n`;\r\n\r\nconst DateCard = styled.div`\r\n  padding: 10px 20px;\r\n  border: 1px solid #e1f4fd;\r\n  color: #e1f4fd;\r\n  margin-right: 10px;\r\n  border-radius: 3px;\r\n  margin-bottom: 10px;\r\n`;\r\nconst EventCard = styled.div`\r\n  background-color: #f4f4f4;\r\n  padding: 10px 15px;\r\n  margin: 0px;\r\n  border-radius: 10px;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst EventCardContainer = styled.div`\r\n  padding: 10px 5px;\r\n  border-radius: 10px;\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}